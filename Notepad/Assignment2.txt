import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
import random

#import dataset and split into train and test
mnist = tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test) = mnist.load_data()


#to see length pf training dataset
len(x_train)

#to see how first image looks
plt.matshow(x_train[0])
plt.show()


#normalizing the images by scaling the pixel intensities to the range 0 to 1
x_train = x_train/255
x_test = x_test/255


#Creating th model
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),  # Input Layer
    keras.layers.Dense(128,activation='relu'),  # Dense Layer
    keras.layers.Dense(10,activation='softmax') # Output Layer
])


#Complie the model
model.compile(optimizer='sgd',
             loss='sparse_categorical_crossentropy',
             metrics=['accuracy'])
			 
			 
#Train model
history = model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=10)


#Evaluate the model
test_loss,test_acc = model.evaluate(x_test,y_test)
print("Loss=%.3f" %test_loss)
print("Accuracy=%.3f" %test_acc)

#Making prediction on new data
n = random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()

# we use predict() on new data
predicted_value = model.predict(x_test)
print("Handwritten number in the image is = ",np.argmax(predicted_value[n]))


plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['Train', 'Validaion'], loc='upper left')
plt.show()


plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Validaion'], loc='upper left')
plt.show()


#Confusion Matrix
test_predict = model.predict(x_test)
# Get the classification labels
test_predict_labels = np.argmax(test_predict,axis=1)
confusion_matrix = tf.math.confusion_matrix(labels=y_test,predictions=test_predict_labels)
print('Confusion matrix of the test set:\n',confusion_matrix)